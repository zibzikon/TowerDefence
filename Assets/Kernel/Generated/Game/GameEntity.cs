//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Text;
using DesperateDevs.Utils;
using Entitas;

public sealed partial class GameEntity : Entitas.Entity {
  
  private string _oldBaseToStringCache;
  private string _toStringCache;
  private StringBuilder _toStringBuilder;

  public override string ToString()
  {
    InvalidateCache();

    if (_toStringCache == null)
    {
      if (_toStringBuilder == null)
        _toStringBuilder = new StringBuilder();

      _toStringBuilder.Length = 0;

      IComponent[] components = GetComponents();

      if (components.Length == 0)
        return "No components";

      _toStringBuilder.Append($"{EntityName(components)} (");

      int num = components.Length - 1;

      for (int index = 0; index < components.Length; ++index)
      {
        IComponent component = components[index];
        Type type = component.GetType();

        _toStringBuilder.Append(type.GetMethod(nameof(ToString)).DeclaringType.ImplementsInterface<IComponent>()
          ? component.ToString()
          : type.Name.RemoveComponentSuffix());

        if (index < num)
          _toStringBuilder.Append(", ");
      }

      _toStringBuilder.Append($")(*{retainCount})");
      _toStringCache = _toStringBuilder.ToString();

      _oldBaseToStringCache = base.ToString();
    }

    return _toStringCache;
  }

  private void InvalidateCache()
  {
    if (_oldBaseToStringCache != base.ToString())
      _toStringCache = null;
  }

  private string EntityName(IComponent[] components)
  {
    return components[0].GetType().Name;
  }
  
  private bool AnyWith(string name, IComponent[] @in) => 
    @in.Any(x => x.GetType().Name == name);
}
